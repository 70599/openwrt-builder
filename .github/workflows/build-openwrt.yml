#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      target:
        type: choice
        description: 'Target image'
        options:
        - r4s
        - x86
        - k3
      repo:
        type: choice
        description: 'Source code repo'
        options:
        - immortalwrt/immortalwrt
        - coolsnowwolf/lede
        - friendlyarm/friendlywrt
      ref:
        description: 'branch or sha'
        required: false
        default: master
      upload_bin_dir:
        type: boolean
        description: 'Upload bin dir'
      upload_firmware:
        type: boolean
        description: 'Upload firmware'

env:
  REPO_URL: https://github.com/${{ github.event.inputs.repo }}
  FEEDS_CONF: feeds.conf
  CONFIG_FILE: ${{ github.event.inputs.target }}.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'
        sudo pip install pyelftools
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Get source code
      uses: actions/checkout@main
      with:
        repository: ${{ github.event.inputs.repo }}
        ref: ${{ github.event.inputs.ref }}
        path: openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && cp -f $FEEDS_CONF openwrt/feeds.conf
        chmod +x $DIY_P1_SH
        cd openwrt
        sudo mkdir -p /mnt/{build_dir,staging_dir}
        sudo chown runner:docker /mnt/{build_dir,staging_dir}
        ln -s /mnt/{build_dir,staging_dir} ./
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && cp -r files openwrt/files
        [ -e $CONFIG_FILE ] && cp $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        echo "${{ secrets.SSH_PUBLIC_KEY }}" >> $GITHUB_WORKSPACE/openwrt/files/root/.ssh/authorized_keys

    - name: Download package
      if: steps.cache-dl-dir.outputs.cache-hit != 'true'
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j $(($(nproc) + 1)) || make -j1 V=s || \
        curl \
          --data parse_mode=HTML \
          --data chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          --data text="<b>‚ùå [${{ github.event.inputs.target }}] Âõ∫‰ª∂ÁºñËØëÂ§±Ë¥•</b>" \
          --request POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage
        df -h /
        echo status=success >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y-%m-%d-%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && ${{ github.event.inputs.upload_bin_dir }}
      with:
        name: OpenWrt_bin_${{ github.event.inputs.target }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: ${{ github.event.inputs.upload_firmware }} && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo status=success >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware_${{ github.event.inputs.target }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Send complete notification
      if: steps.organize.outputs.status == 'success'
      run: |
        TITLE="<b>‚úÖ [${{ github.event.inputs.target }}] Âõ∫‰ª∂ÁºñËØëÂÆåÊàê</b>"
        MESSAGE="üîó <a href='${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'>‰∏ãËΩΩÂú∞ÂùÄ</a>"
        curl \
          --data parse_mode=HTML \
          --data disable_web_page_preview=true \
          --data chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          --data text="$TITLE%0A$MESSAGE" \
          --request POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage
